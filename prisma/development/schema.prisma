// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

model User {
  @@map(name: "user")
  id                Int         @default(autoincrement()) @id
  email             String      @db.VarChar(320) @unique
  username          String      @db.VarChar(100) @default("player")
  password          Bytes       @db.Blob()
  stamp_create      DateTime    @db.Timestamp() @default(now())
  last_online       DateTime    @db.Timestamp() @default(now())
  active            Boolean     @default(true)
  status            UserStatus  @default(menu)
  platform          Platform
  skins             Skin[]
  sessions          Session[]
  player_one        Match[]     @relation(name: "player_one")
  player_two        Match[]     @relation(name: "player_two")
}

model Skin {
  @@map(name: "skin")
  user_id           Int
  skin_type         SkinType
  user              User      @relation(fields: [user_id], references: [id])
  
  @@id([user_id, skin_type])
}

model Session {
  @@map(name: "session")
  id                Int       @default(autoincrement()) @id
  user_id           Int
  session_id        String    @db.VarChar(24)
  stamp_create      DateTime  @db.Timestamp() @default(now())
  user              User      @relation(fields: [user_id], references: [id])
  session_one       Match[]   @relation(name: "session_one")
  session_two       Match[]   @relation(name: "session_two")
}

model Match {
  @@map(name: "match")
  id                        Int       @default(autoincrement()) @id
  stamp_create              DateTime  @db.Timestamp() @default(now())
  player_one_id             Int
  player_two_id             Int
  player_one_session_id     Int
  player_two_session_id     Int
  player_one                User      @relation(name: "player_one", fields: [player_one_id], references: [id])
  player_two                User      @relation(name: "player_two", fields: [player_two_id], references: [id])
  session_one               Session   @relation(name: "session_one", fields: [player_one_session_id], references: [id])
  session_two               Session   @relation(name: "session_two", fields: [player_two_session_id], references: [id])
  status                    Status
}

enum Platform {
  html5
}

enum SkinType {
  head
  body
  legs
  accessory
}

enum Status {
  completed
  canceled
}

enum UserStatus {
  offline
  menu
  playing
}